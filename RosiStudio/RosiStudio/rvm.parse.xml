<Global xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.rosivm.org/2014/parse/ RosiLang.parse.xsd" xmlns="http://www.rosivm.org/2014/parse/">
  <Module prod="(Module) ::= module (Name) l-brac (ModuleMembers) r-brac">
    <module line="0" column="0">module</module>
    <Name line="0" column="7">structures</Name>
    <l-brac line="0" column="18">{</l-brac>
    <Interface prod="(Interface) ::= (Visibility) interface (Name) (TypeParameters) (Implements) l-brac (InterfaceMembers) r-brac">
      <Visibility line="1" column="4">public</Visibility>
      <interface line="1" column="11">interface</interface>
      <Name line="1" column="21">Cloneable</Name>
      <l-brac line="1" column="31">{</l-brac>
      <Method prod="(InterfaceMethod) ::= method (Name) l-paren (Arguments) r-paren (ReturnType) semicolon">
        <method line="2" column="8">method</method>
        <Name line="2" column="15">clone</Name>
        <l-paren line="2" column="20">(</l-paren>
        <r-paren line="2" column="21">)</r-paren>
        <ReturnType prod="(ReturnType) ::= turns-in (Type)">
          <turns-in line="2" column="23">=&gt;</turns-in>
          <Type prod="(Type) ::= Identifier (TypeArguments)">
            <Identifier line="2" column="26">object</Identifier>
          </Type>
        </ReturnType>
        <semicolon line="2" column="32">;</semicolon>
      </Method>
      <r-brac line="3" column="4">}</r-brac>
    </Interface>
    <Interface prod="(Interface) ::= (Visibility) interface (Name) (TypeParameters) (Implements) l-brac (InterfaceMembers) r-brac">
      <Visibility line="4" column="4">public</Visibility>
      <interface line="4" column="11">interface</interface>
      <Name line="4" column="21">ListView</Name>
      <TypeParameters prod="(TypeParameters) ::= less-than (TypeParameterMembers) greater-than">
        <less-than line="4" column="29">&lt;</less-than>
        <Typeparameter line="4" column="30">T</Typeparameter>
        <greater-than line="4" column="31">&gt;</greater-than>
      </TypeParameters>
      <Implements prod="(Implements) ::= implements (Types)">
        <implements line="4" column="33">implements</implements>
        <Type prod="(Type) ::= Identifier (TypeArguments)">
          <Identifier line="4" column="44">Cloneable</Identifier>
        </Type>
      </Implements>
      <l-brac line="4" column="54">{</l-brac>
      <Field prod="(InterfaceField) ::= var (Name) colon (Type) semicolon">
        <var line="5" column="8">var</var>
        <Name line="5" column="12">length</Name>
        <colon line="5" column="18">:</colon>
        <Type prod="(Type) ::= Identifier (TypeArguments)">
          <Identifier line="5" column="20">int</Identifier>
        </Type>
        <semicolon line="5" column="23">;</semicolon>
      </Field>
      <Method prod="(InterfaceMethod) ::= method (Name) l-paren (Arguments) r-paren (ReturnType) semicolon">
        <method line="6" column="8">method</method>
        <Name line="6" column="15">get</Name>
        <l-paren line="6" column="18">(</l-paren>
        <Argument prod="(Argument) ::= (Name) colon (Type)">
          <Name line="6" column="19">index</Name>
          <colon line="6" column="24">:</colon>
          <Type prod="(Type) ::= Identifier (TypeArguments)">
            <Identifier line="6" column="26">int</Identifier>
          </Type>
        </Argument>
        <r-paren line="6" column="29">)</r-paren>
        <ReturnType prod="(ReturnType) ::= turns-in (Type)">
          <turns-in line="6" column="31">=&gt;</turns-in>
          <Type prod="(Type) ::= Identifier (TypeArguments)">
            <Identifier line="6" column="34">T</Identifier>
          </Type>
        </ReturnType>
        <semicolon line="6" column="35">;</semicolon>
      </Method>
      <r-brac line="7" column="4">}</r-brac>
    </Interface>
    <Interface prod="(Interface) ::= (Visibility) interface (Name) (TypeParameters) (Implements) l-brac (InterfaceMembers) r-brac">
      <Visibility line="8" column="4">public</Visibility>
      <interface line="8" column="11">interface</interface>
      <Name line="8" column="21">List</Name>
      <TypeParameters prod="(TypeParameters) ::= less-than (TypeParameterMembers) greater-than">
        <less-than line="8" column="25">&lt;</less-than>
        <Typeparameter line="8" column="26">T</Typeparameter>
        <greater-than line="8" column="27">&gt;</greater-than>
      </TypeParameters>
      <Implements prod="(Implements) ::= implements (Types)">
        <implements line="8" column="29">implements</implements>
        <Type prod="(Type) ::= Identifier (TypeArguments)">
          <Identifier line="8" column="40">ListView</Identifier>
          <Arguments prod="(TypeArguments) ::= less-than (Types) greater-than">
            <less-than line="8" column="48">&lt;</less-than>
            <Type prod="(Type) ::= Identifier (TypeArguments)">
              <Identifier line="8" column="49">T</Identifier>
            </Type>
            <greater-than line="8" column="50">&gt;</greater-than>
          </Arguments>
        </Type>
      </Implements>
      <l-brac line="8" column="52">{</l-brac>
      <Field prod="(InterfaceField) ::= var (Name) colon (Type) semicolon">
        <var line="9" column="8">var</var>
        <Name line="9" column="12">length</Name>
        <colon line="9" column="18">:</colon>
        <Type prod="(Type) ::= Identifier (TypeArguments)">
          <Identifier line="9" column="20">int</Identifier>
        </Type>
        <semicolon line="9" column="23">;</semicolon>
      </Field>
      <Method prod="(InterfaceMethod) ::= method (Name) l-paren (Arguments) r-paren (ReturnType) semicolon">
        <method line="10" column="8">method</method>
        <Name line="10" column="15">get</Name>
        <l-paren line="10" column="18">(</l-paren>
        <Argument prod="(Argument) ::= (Name) colon (Type)">
          <Name line="10" column="19">index</Name>
          <colon line="10" column="24">:</colon>
          <Type prod="(Type) ::= Identifier (TypeArguments)">
            <Identifier line="10" column="26">int</Identifier>
          </Type>
        </Argument>
        <r-paren line="10" column="29">)</r-paren>
        <ReturnType prod="(ReturnType) ::= turns-in (Type)">
          <turns-in line="10" column="31">=&gt;</turns-in>
          <Type prod="(Type) ::= Identifier (TypeArguments)">
            <Identifier line="10" column="34">T</Identifier>
          </Type>
        </ReturnType>
        <semicolon line="10" column="35">;</semicolon>
      </Method>
      <Method prod="(InterfaceMethod) ::= method (Name) l-paren (Arguments) r-paren (ReturnType) semicolon">
        <method line="11" column="8">method</method>
        <Name line="11" column="15">set</Name>
        <l-paren line="11" column="18">(</l-paren>
        <Arguments prod="(Arguments) ::= (Argument) comma (Arguments)">
          <Argument prod="(Argument) ::= (Name) colon (Type)">
            <Name line="11" column="19">index</Name>
            <colon line="11" column="24">:</colon>
            <Type prod="(Type) ::= Identifier (TypeArguments)">
              <Identifier line="11" column="26">int</Identifier>
            </Type>
          </Argument>
          <comma line="11" column="29">,</comma>
          <Argument prod="(Argument) ::= (Name) colon (Type)">
            <Name line="11" column="31">T</Name>
            <colon line="11" column="32">:</colon>
            <Type prod="(Type) ::= Identifier (TypeArguments)">
              <Identifier line="11" column="34">value</Identifier>
            </Type>
          </Argument>
        </Arguments>
        <r-paren line="11" column="39">)</r-paren>
        <semicolon line="11" column="40">;</semicolon>
      </Method>
      <r-brac line="12" column="4">}</r-brac>
    </Interface>
    <Interface prod="(Interface) ::= (Visibility) interface (Name) (TypeParameters) (Implements) l-brac (InterfaceMembers) r-brac">
      <Visibility line="13" column="4">public</Visibility>
      <interface line="13" column="11">interface</interface>
      <Name line="13" column="21">Map</Name>
      <TypeParameters prod="(TypeParameters) ::= less-than (TypeParameterMembers) greater-than">
        <less-than line="13" column="24">&lt;</less-than>
        <Typeparameter line="13" column="25">Key</Typeparameter>
        <comma line="13" column="28">,</comma>
        <Typeparameter line="13" column="30">Value</Typeparameter>
        <greater-than line="13" column="35">&gt;</greater-than>
      </TypeParameters>
      <l-brac line="13" column="37">{</l-brac>
      <Method prod="(InterfaceMethod) ::= method (Name) l-paren (Arguments) r-paren (ReturnType) semicolon">
        <method line="14" column="8">method</method>
        <Name line="14" column="15">get</Name>
        <l-paren line="14" column="18">(</l-paren>
        <Argument prod="(Argument) ::= (Name) colon (Type)">
          <Name line="14" column="19">key</Name>
          <colon line="14" column="22">:</colon>
          <Type prod="(Type) ::= Identifier (TypeArguments)">
            <Identifier line="14" column="24">Key</Identifier>
          </Type>
        </Argument>
        <r-paren line="14" column="27">)</r-paren>
        <ReturnType prod="(ReturnType) ::= turns-in (Type)">
          <turns-in line="14" column="29">=&gt;</turns-in>
          <Type prod="(Type) ::= Identifier (TypeArguments)">
            <Identifier line="14" column="32">Value</Identifier>
          </Type>
        </ReturnType>
        <semicolon line="14" column="37">;</semicolon>
      </Method>
      <r-brac line="15" column="4">}</r-brac>
    </Interface>
    <r-brac line="16" column="0">}</r-brac>
  </Module>
  <Module prod="(Module) ::= module (Name) l-brac (ModuleMembers) r-brac">
    <module line="18" column="0">module</module>
    <Name line="18" column="7">math</Name>
    <l-brac line="18" column="12">{</l-brac>
    <Function prod="(Function) ::= (Visibility) function (Name) (TypeParameters) l-paren (Arguments) r-paren (ReturnType) (StatementBlock)">
      <Visibility line="19" column="4">public</Visibility>
      <function line="19" column="11">function</function>
      <Name line="19" column="20">min</Name>
      <l-paren line="19" column="23">(</l-paren>
      <Arguments prod="(Arguments) ::= (Argument) comma (Arguments)">
        <Argument prod="(Argument) ::= (Name) colon (Type)">
          <Name line="19" column="24">x</Name>
          <colon line="19" column="25">:</colon>
          <Type prod="(Type) ::= Identifier (TypeArguments)">
            <Identifier line="19" column="27">float64</Identifier>
          </Type>
        </Argument>
        <comma line="19" column="34">,</comma>
        <Argument prod="(Argument) ::= (Name) colon (Type)">
          <Name line="19" column="36">y</Name>
          <colon line="19" column="37">:</colon>
          <Type prod="(Type) ::= Identifier (TypeArguments)">
            <Identifier line="19" column="39">float64</Identifier>
          </Type>
        </Argument>
      </Arguments>
      <r-paren line="19" column="46">)</r-paren>
      <ReturnType prod="(ReturnType) ::= turns-in (Type)">
        <turns-in line="19" column="48">=&gt;</turns-in>
        <Type prod="(Type) ::= Identifier (TypeArguments)">
          <Identifier line="19" column="51">float64</Identifier>
        </Type>
      </ReturnType>
      <StatementBlock prod="(StatementBlock) ::= l-brac (StatementBlockMembers) r-brac">
        <l-brac line="19" column="59">{</l-brac>
        <Statement prod="(Statement) ::= (Expression) semicolon">
          <Invocation prod="(Invocation) ::= (Prec13Exp) l-paren (Values) r-paren">
            <Identifier line="20" column="8">obj1</Identifier>
            <l-paren line="20" column="12">(</l-paren>
            <Values prod="(Values) ::= (Expression) comma (Values)">
              <Identifier line="20" column="13">x</Identifier>
              <comma line="20" column="14">,</comma>
              <Multiply prod="(Multiply) ::= (Prec11Exp) multiply (Prec12Exp)">
                <ConstantValue line="20" column="16">12</ConstantValue>
                <multiply line="20" column="19">*</multiply>
                <Identifier line="20" column="21">y</Identifier>
              </Multiply>
            </Values>
            <r-paren line="20" column="22">)</r-paren>
          </Invocation>
          <semicolon line="20" column="23">;</semicolon>
        </Statement>
        <Statement prod="(Statement) ::= (Expression) semicolon">
          <Invocation prod="(Invocation) ::= (Prec13Exp) l-paren (Values) r-paren">
            <Identifier line="21" column="8">obj2</Identifier>
            <l-paren line="21" column="12">(</l-paren>
            <r-paren line="21" column="13">)</r-paren>
          </Invocation>
          <semicolon line="21" column="14">;</semicolon>
        </Statement>
        <Statement prod="(Statement) ::= (Expression) semicolon">
          <Invocation prod="(Invocation) ::= (Prec13Exp) l-paren (Values) r-paren">
            <Identifier line="22" column="8">obj3</Identifier>
            <l-paren line="22" column="12">(</l-paren>
            <Add prod="(Add) ::= (Prec10Exp) plus (Prec11Exp)">
              <ConstantValue line="22" column="13">12</ConstantValue>
              <plus line="22" column="16">+</plus>
              <Multiply prod="(Multiply) ::= (Prec11Exp) multiply (Prec12Exp)">
                <Identifier line="22" column="18">y</Identifier>
                <multiply line="22" column="20">*</multiply>
                <Identifier line="22" column="22">x</Identifier>
              </Multiply>
            </Add>
            <r-paren line="22" column="23">)</r-paren>
          </Invocation>
          <semicolon line="22" column="24">;</semicolon>
        </Statement>
        <r-brac line="23" column="4">}</r-brac>
      </StatementBlock>
    </Function>
    <Function prod="(Function) ::= (Visibility) function (Name) (TypeParameters) l-paren (Arguments) r-paren (ReturnType) (StatementBlock)">
      <Visibility line="24" column="4">public</Visibility>
      <function line="24" column="11">function</function>
      <Name line="24" column="20">max</Name>
      <l-paren line="24" column="23">(</l-paren>
      <Arguments prod="(Arguments) ::= (Argument) comma (Arguments)">
        <Argument prod="(Argument) ::= (Name) colon (Type)">
          <Name line="24" column="24">x</Name>
          <colon line="24" column="25">:</colon>
          <Type prod="(Type) ::= Identifier (TypeArguments)">
            <Identifier line="24" column="27">float64</Identifier>
          </Type>
        </Argument>
        <comma line="24" column="34">,</comma>
        <Argument prod="(Argument) ::= (Name) colon (Type)">
          <Name line="24" column="36">y</Name>
          <colon line="24" column="37">:</colon>
          <Type prod="(Type) ::= Identifier (TypeArguments)">
            <Identifier line="24" column="39">float64</Identifier>
          </Type>
        </Argument>
      </Arguments>
      <r-paren line="24" column="46">)</r-paren>
      <ReturnType prod="(ReturnType) ::= turns-in (Type)">
        <turns-in line="24" column="48">=&gt;</turns-in>
        <Type prod="(Type) ::= Identifier (TypeArguments)">
          <Identifier line="24" column="51">float64</Identifier>
        </Type>
      </ReturnType>
      <StatementBlock prod="(StatementBlock) ::= l-brac r-brac">
        <l-brac line="24" column="59">{</l-brac>
        <r-brac line="25" column="4">}</r-brac>
      </StatementBlock>
    </Function>
    <Function prod="(Function) ::= (Visibility) function (Name) (TypeParameters) l-paren (Arguments) r-paren (ReturnType) (StatementBlock)">
      <Visibility line="26" column="4">public</Visibility>
      <function line="26" column="11">function</function>
      <Name line="26" column="20">sin</Name>
      <l-paren line="26" column="23">(</l-paren>
      <Argument prod="(Argument) ::= (Name) colon (Type)">
        <Name line="26" column="24">x</Name>
        <colon line="26" column="25">:</colon>
        <Type prod="(Type) ::= Identifier (TypeArguments)">
          <Identifier line="26" column="27">float64</Identifier>
        </Type>
      </Argument>
      <r-paren line="26" column="34">)</r-paren>
      <ReturnType prod="(ReturnType) ::= turns-in (Type)">
        <turns-in line="26" column="36">=&gt;</turns-in>
        <Type prod="(Type) ::= Identifier (TypeArguments)">
          <Identifier line="26" column="39">float64</Identifier>
        </Type>
      </ReturnType>
      <StatementBlock prod="(StatementBlock) ::= l-brac r-brac">
        <l-brac line="26" column="47">{</l-brac>
        <r-brac line="27" column="4">}</r-brac>
      </StatementBlock>
    </Function>
    <Function prod="(Function) ::= (Visibility) function (Name) (TypeParameters) l-paren (Arguments) r-paren (ReturnType) (StatementBlock)">
      <Visibility line="28" column="4">public</Visibility>
      <function line="28" column="11">function</function>
      <Name line="28" column="20">cos</Name>
      <l-paren line="28" column="23">(</l-paren>
      <Argument prod="(Argument) ::= (Name) colon (Type)">
        <Name line="28" column="24">x</Name>
        <colon line="28" column="25">:</colon>
        <Type prod="(Type) ::= Identifier (TypeArguments)">
          <Identifier line="28" column="27">float64</Identifier>
        </Type>
      </Argument>
      <r-paren line="28" column="34">)</r-paren>
      <ReturnType prod="(ReturnType) ::= turns-in (Type)">
        <turns-in line="28" column="36">=&gt;</turns-in>
        <Type prod="(Type) ::= Identifier (TypeArguments)">
          <Identifier line="28" column="39">float64</Identifier>
        </Type>
      </ReturnType>
      <StatementBlock prod="(StatementBlock) ::= l-brac r-brac">
        <l-brac line="28" column="47">{</l-brac>
        <r-brac line="29" column="4">}</r-brac>
      </StatementBlock>
    </Function>
    <Function prod="(Function) ::= (Visibility) function (Name) (TypeParameters) l-paren (Arguments) r-paren (ReturnType) (StatementBlock)">
      <Visibility line="30" column="4">public</Visibility>
      <function line="30" column="11">function</function>
      <Name line="30" column="20">abs</Name>
      <l-paren line="30" column="23">(</l-paren>
      <Argument prod="(Argument) ::= (Name) colon (Type)">
        <Name line="30" column="24">x</Name>
        <colon line="30" column="25">:</colon>
        <Type prod="(Type) ::= Identifier (TypeArguments)">
          <Identifier line="30" column="27">float64</Identifier>
        </Type>
      </Argument>
      <r-paren line="30" column="34">)</r-paren>
      <ReturnType prod="(ReturnType) ::= turns-in (Type)">
        <turns-in line="30" column="36">=&gt;</turns-in>
        <Type prod="(Type) ::= Identifier (TypeArguments)">
          <Identifier line="30" column="39">float64</Identifier>
        </Type>
      </ReturnType>
      <StatementBlock prod="(StatementBlock) ::= l-brac r-brac">
        <l-brac line="30" column="47">{</l-brac>
        <r-brac line="31" column="4">}</r-brac>
      </StatementBlock>
    </Function>
    <r-brac line="32" column="0">}</r-brac>
  </Module>
  <Module prod="(Module) ::= module (Name) l-brac (ModuleMembers) r-brac">
    <module line="34" column="0">module</module>
    <Name line="34" column="7">geometry</Name>
    <l-brac line="34" column="16">{</l-brac>
    <Interface prod="(Interface) ::= (Visibility) interface (Name) (TypeParameters) (Implements) l-brac (InterfaceMembers) r-brac">
      <Visibility line="36" column="4">public</Visibility>
      <interface line="36" column="11">interface</interface>
      <Name line="36" column="21">Equatible</Name>
      <l-brac line="36" column="31">{</l-brac>
      <Method prod="(InterfaceMethod) ::= method (Name) l-paren (Arguments) r-paren (ReturnType) semicolon">
        <method line="37" column="8">method</method>
        <Name line="37" column="15">equals</Name>
        <l-paren line="37" column="21">(</l-paren>
        <Argument prod="(Argument) ::= (Name) colon (Type)">
          <Name line="37" column="22">other</Name>
          <colon line="37" column="27">:</colon>
          <Type prod="(Type) ::= Identifier (TypeArguments)">
            <Identifier line="37" column="29">object</Identifier>
          </Type>
        </Argument>
        <r-paren line="37" column="35">)</r-paren>
        <ReturnType prod="(ReturnType) ::= turns-in (Type)">
          <turns-in line="37" column="37">=&gt;</turns-in>
          <Type prod="(Type) ::= Identifier (TypeArguments)">
            <Identifier line="37" column="40">bool</Identifier>
          </Type>
        </ReturnType>
        <semicolon line="37" column="44">;</semicolon>
      </Method>
      <r-brac line="38" column="4">}</r-brac>
    </Interface>
    <Class prod="(Class) ::= (Visibility) class (Name) (TypeParameters) (Extends) (Implements) l-brac (ClassMembers) r-brac">
      <Visibility line="40" column="4">public</Visibility>
      <class line="40" column="11">class</class>
      <Name line="40" column="17">Point</Name>
      <l-brac line="40" column="23">{</l-brac>
      <Field prod="(Field) ::= (Visibility) var (Name) colon (Type) semicolon">
        <var line="41" column="8">var</var>
        <Name line="41" column="12">x</Name>
        <colon line="41" column="13">:</colon>
        <Type prod="(Type) ::= Identifier (TypeArguments)">
          <Identifier line="41" column="15">float32</Identifier>
        </Type>
        <semicolon line="41" column="22">;</semicolon>
      </Field>
      <Field prod="(Field) ::= (Visibility) var (Name) colon (Type) semicolon">
        <var line="42" column="8">var</var>
        <Name line="42" column="12">y</Name>
        <colon line="42" column="13">:</colon>
        <Type prod="(Type) ::= Identifier (TypeArguments)">
          <Identifier line="42" column="15">float32</Identifier>
        </Type>
        <semicolon line="42" column="22">;</semicolon>
      </Field>
      <Method prod="(ClassMethod) ::= (Visibility) method (Name) (TypeParameters) l-paren (Arguments) r-paren (ReturnType) (StatementBlock)">
        <Visibility line="44" column="8">public</Visibility>
        <method line="44" column="15">method</method>
        <Name line="44" column="22">add</Name>
        <l-paren line="44" column="25">(</l-paren>
        <Argument prod="(Argument) ::= (Name) colon (Type)">
          <Name line="44" column="26">p</Name>
          <colon line="44" column="27">:</colon>
          <Type prod="(Type) ::= Identifier (TypeArguments)">
            <Identifier line="44" column="29">Point</Identifier>
          </Type>
        </Argument>
        <r-paren line="44" column="34">)</r-paren>
        <StatementBlock prod="(StatementBlock) ::= l-brac (StatementBlockMembers) r-brac">
          <l-brac line="44" column="36">{</l-brac>
          <Statement prod="(Statement) ::= (Expression) semicolon">
            <Assign prod="(Assign) ::= (Prec12Exp) assign (Expression)">
              <MemberAccess prod="(MemberAccess) ::= (Prec13Exp) dot (Member)">
                <Identifier line="45" column="12">this</Identifier>
                <dot line="45" column="16">.</dot>
                <Member line="45" column="17">x</Member>
              </MemberAccess>
              <assign line="45" column="19">=</assign>
              <Add prod="(Add) ::= (Prec10Exp) plus (Prec11Exp)">
                <ConstantValue line="45" column="21">12</ConstantValue>
                <plus line="45" column="24">+</plus>
                <ConstantValue line="45" column="26">15</ConstantValue>
              </Add>
            </Assign>
            <semicolon line="45" column="28">;</semicolon>
          </Statement>
          <Statement prod="(Statement) ::= (Expression) semicolon">
            <Assign prod="(Assign) ::= (Prec12Exp) assign (Expression)">
              <MemberAccess prod="(MemberAccess) ::= (Prec13Exp) dot (Member)">
                <Identifier line="46" column="12">this</Identifier>
                <dot line="46" column="16">.</dot>
                <Member line="46" column="17">y</Member>
              </MemberAccess>
              <assign line="46" column="19">=</assign>
              <Multiply prod="(Multiply) ::= (Prec11Exp) multiply (Prec12Exp)">
                <ConstantValue line="46" column="21">13</ConstantValue>
                <multiply line="46" column="24">*</multiply>
                <PostIncrement prod="(PostIncrement) ::= (Prec13Exp) increment">
                  <ConstantValue line="46" column="26">16</ConstantValue>
                  <increment line="46" column="28">++</increment>
                </PostIncrement>
              </Multiply>
            </Assign>
            <semicolon line="46" column="30">;</semicolon>
          </Statement>
          <If prod="(If) ::= if l-paren (Expression) r-paren (Statement) else (Statement)">
            <if line="48" column="12">if</if>
            <l-paren line="48" column="15">(</l-paren>
            <GreaterThan prod="(GreaterThan) ::= (Prec8Exp) greater-than (Prec9Exp)">
              <Identifier line="48" column="16">x</Identifier>
              <greater-than line="48" column="18">&gt;</greater-than>
              <ConstantValue line="48" column="20">15</ConstantValue>
            </GreaterThan>
            <r-paren line="48" column="22">)</r-paren>
            <Statement prod="(Statement) ::= (Expression) semicolon">
              <Invocation prod="(Invocation) ::= (Prec13Exp) l-paren (Values) r-paren">
                <Identifier line="48" column="24">large</Identifier>
                <l-paren line="48" column="29">(</l-paren>
                <r-paren line="48" column="30">)</r-paren>
              </Invocation>
              <semicolon line="48" column="31">;</semicolon>
            </Statement>
            <else line="49" column="12">else</else>
            <Statement prod="(Statement) ::= (Expression) semicolon">
              <Invocation prod="(Invocation) ::= (Prec13Exp) l-paren (Values) r-paren">
                <Identifier line="49" column="17">small</Identifier>
                <l-paren line="49" column="22">(</l-paren>
                <r-paren line="49" column="23">)</r-paren>
              </Invocation>
              <semicolon line="49" column="24">;</semicolon>
            </Statement>
          </If>
          <If prod="(If) ::= if l-paren (Expression) r-paren (Statement) else (Statement)">
            <if line="51" column="12">if</if>
            <l-paren line="51" column="15">(</l-paren>
            <Not prod="(Not) ::= not (Prec12Exp)">
              <not line="51" column="16">!</not>
              <Identifier line="51" column="17">x</Identifier>
            </Not>
            <r-paren line="51" column="18">)</r-paren>
            <StatementBlock prod="(StatementBlock) ::= l-brac (StatementBlockMembers) r-brac">
              <l-brac line="51" column="20">{</l-brac>
              <If prod="(If) ::= if l-paren (Expression) r-paren (Statement) else (Statement)">
                <if line="52" column="16">if</if>
                <l-paren line="52" column="19">(</l-paren>
                <Not prod="(Not) ::= not (Prec12Exp)">
                  <not line="52" column="20">!</not>
                  <Identifier line="52" column="21">y</Identifier>
                </Not>
                <r-paren line="52" column="22">)</r-paren>
                <StatementBlock prod="(StatementBlock) ::= l-brac (StatementBlockMembers) r-brac">
                  <l-brac line="52" column="24">{</l-brac>
                  <Statement prod="(Statement) ::= (Expression) semicolon">
                    <Invocation prod="(Invocation) ::= (Prec13Exp) l-paren (Values) r-paren">
                      <Identifier line="53" column="20">large</Identifier>
                      <l-paren line="53" column="25">(</l-paren>
                      <r-paren line="53" column="26">)</r-paren>
                    </Invocation>
                    <semicolon line="53" column="27">;</semicolon>
                  </Statement>
                  <r-brac line="54" column="16">}</r-brac>
                </StatementBlock>
                <else line="54" column="18">else</else>
                <StatementBlock prod="(StatementBlock) ::= l-brac (StatementBlockMembers) r-brac">
                  <l-brac line="54" column="23">{</l-brac>
                  <Statement prod="(Statement) ::= (Expression) semicolon">
                    <Invocation prod="(Invocation) ::= (Prec13Exp) l-paren (Values) r-paren">
                      <Identifier line="55" column="20">small</Identifier>
                      <l-paren line="55" column="25">(</l-paren>
                      <r-paren line="55" column="26">)</r-paren>
                    </Invocation>
                    <semicolon line="55" column="27">;</semicolon>
                  </Statement>
                  <r-brac line="56" column="16">}</r-brac>
                </StatementBlock>
              </If>
              <r-brac line="57" column="12">}</r-brac>
            </StatementBlock>
            <else line="57" column="14">else</else>
            <StatementBlock prod="(StatementBlock) ::= l-brac (StatementBlockMembers) r-brac">
              <l-brac line="57" column="19">{</l-brac>
              <Statement prod="(Statement) ::= (Expression) semicolon">
                <Invocation prod="(Invocation) ::= (Prec13Exp) l-paren (Values) r-paren">
                  <Identifier line="58" column="16">verySmall</Identifier>
                  <l-paren line="58" column="25">(</l-paren>
                  <r-paren line="58" column="26">)</r-paren>
                </Invocation>
                <semicolon line="58" column="27">;</semicolon>
              </Statement>
              <r-brac line="59" column="12">}</r-brac>
            </StatementBlock>
          </If>
          <r-brac line="60" column="8">}</r-brac>
        </StatementBlock>
      </Method>
      <r-brac line="61" column="4">}</r-brac>
    </Class>
    <Class prod="(Class) ::= (Visibility) class (Name) (TypeParameters) (Extends) (Implements) l-brac (ClassMembers) r-brac">
      <Visibility line="63" column="4">public</Visibility>
      <class line="63" column="11">class</class>
      <Name line="63" column="17">Point3d</Name>
      <l-brac line="63" column="25">{</l-brac>
      <Field prod="(Field) ::= (Visibility) var (Name) colon (Type) semicolon">
        <var line="64" column="8">var</var>
        <Name line="64" column="12">z</Name>
        <colon line="64" column="13">:</colon>
        <Type prod="(Type) ::= Identifier (TypeArguments)">
          <Identifier line="64" column="15">float32</Identifier>
        </Type>
        <semicolon line="64" column="22">;</semicolon>
      </Field>
      <r-brac line="65" column="4">}</r-brac>
    </Class>
    <r-brac line="66" column="0">}</r-brac>
  </Module>
</Global>
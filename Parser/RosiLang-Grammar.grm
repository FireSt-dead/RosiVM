! Properties
"Name"    = 'RosiLang'
"Version" = '0.01 alpha'
"Author"  = 'Panayot C. Cankov'

"About"   = 'RosiVMs RosiLang - First blood version.'

"Case Sensitive" = 'True'
"Start Symbol" = <GlobalMembers>
               
!* TODO: At some point we will have to introduce convention on lists and optional usage. For example postfixes Lst and Opt *! 
        
! Identifiers
Identifier = {Letter}{AlphaNumeric}*

! TODO: IEEE 754        
Integer        = {Digit}+
Float          = {Digit}+ '.' {Digit}+

<ConstantValue> ::= Integer
                 | Float
                 | 'true'
                 | 'false'
                 ! TODO: string

! Types    
<GlobalMembers> ::= <ModuleMember> <GlobalMembers> | <>
          
<ModuleMember> ::= <Module>
                | <Class>
           
<Module> ::= 'module' Identifier '{' <ModuleMembers> '}'
          
<ModuleMembers> ::= <ModuleMember> <ModuleMembers> | <>
                 
<Class> ::= <Visibility> 'class' Identifier <Extends> <Implements> '{' <ClassMembers> '}'
         
<Visibility> ::= 'public' | 'protected' | 'private' | <>
              
<Extends> ::= 'extends' Identifier | <>
           
<Implements> ::= 'implements' <ImplementedInterfaces> | <>
              
<ImplementedInterfaces> ::= <InterfaceType> ',' <ImplementedInterfaces> | <InterfaceType>
                         
<InterfaceType> ::= Identifier ! TODO: generic parameters
              
<ClassMembers> ::= <ClassMember> <ClassMembers> | <>

<ClassMember> ::= <Field>
               | <Constructor>
               | <Function>
               
<Field> ::= <Visibility> 'var' Identifier <VarType> ';'
        
<VarType> ::= ':' Identifier | <> 
         
<Constructor> ::= <Visibility> 'constructor' '(' <Parameters> ')' <StatementBlock> 
               
<Function> ::= <Visibility> 'method' Identifier '(' <Parameters> ')' <ReturnType> <StatementBlock>
              
<Parameters> ::= <Parameter> ',' <Parameters> | <Parameter> | <>
<Parameter> ::= Identifier <VarType>
             
<ReturnType> ::= '=>' Identifier | <>
              
! Statements
<StatementBlock> ::= '{' '}' | '{' <Statements> '}' 
<Statements> ::= <Statement> <Statements> | <Statement>
<Statement> ::= <StatementBlock>
             | <Expression> ';'
             | 'if' '(' <Expression> ')' <Statement> 'else' <Statement>
             | 'if' '(' <Expression> ')' <Statement> ! TODO: Check the impact of that else missing if...
             
! Expressions
<Expression> ::= <Prec0Exp>
              | <Prec1Exp>
              
<Prec0Exp> ::= <Prec12Exp> <Prec0Op> <Expression>
<Prec0Op> ::= '=' | '+=' | '-=' | '*=' | '/=' | '^=' | '&=' | '|=' | '%=' | '<<=' | '>>='

<Prec1Exp> ::= <Prec2Exp> '?' <Expression> ':' <Expression> | <Prec2Exp>
           
<Prec2Exp> ::= <Prec2Exp> '||' <Prec3Exp> | <Prec3Exp>
<Prec3Exp> ::= <Prec3Exp> '&&' <Prec4Exp> | <Prec4Exp>

<Prec4Exp> ::= <Prec4Exp> '|' <Prec5Exp> | <Prec5Exp>
<Prec5Exp> ::= <Prec5Exp> '^' <Prec6Exp> | <Prec6Exp>
<Prec6Exp> ::= <Prec6Exp> '&' <Prec7Exp> | <Prec7Exp>

<Prec7Exp> ::= <Prec7Exp> <Prec7Op> <Prec8Exp> | <Prec8Exp>
<Prec7Op> ::= '==' | '!='
           
<Prec8Exp> ::= <Prec8Exp> <Prec8Op> <Prec9Exp> | <Prec9Exp>
<Prec8Op> ::= '<' | '>' | '<=' | '>=' ! | 'is' | 'as'

<Prec9Exp> ::= <Prec9Exp> <Prec9Op> <Prec10Exp> | <Prec10Exp>
<Prec9Op> ::= '<<' | '>>'

<Prec10Exp> ::=  <Prec10Exp> <Prec10Op> <Prec11Exp> | <Prec11Exp>
<Prec10Op> ::= '+' | '-'

<Prec11Exp> ::=  <Prec11Exp> <Prec11Op> <Prec12Exp> | <Prec12Exp>
<Prec11Op> ::= '*' | '/' | '%'

<Prec12Exp> ::= <Prec12Op> <Prec12Exp> | <Prec13Exp> 
<Prec12Op> ::= '!' | '~' | '-' | '++' | '--' ! |  cast: '(' <TypeExpression> ')'

<Prec13Exp> ::= Identifier
             | <ConstantValue>
             | '(' <Expression> ')'
             | <Prec13Exp> '++'
             | <Prec13Exp> '--'
             | <Prec13Exp> '.' Identifier
             | <Prec13Exp> '(' ')' ! TODO: invocation, add params list
             ! TODO: a lot of shit is going here...





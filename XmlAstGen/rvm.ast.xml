<Global xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.rosivm.org/2014/ast/ RosiLang-AST.xsd" xmlns="http://www.rosivm.org/2014/ast/">
  <Module prod="(Module) ::= module (Name) l-brac (ModuleMembers) r-brac">
    <module line="0" column="0" />
    <Name line="0" column="7">math</Name>
    <l-brac line="0" column="12" />
    <Function prod="(Function) ::= (Visibility) function (Name) l-paren (Parameters) r-paren (ReturnType) (StatementBlock)">
      <Visibility line="1" column="4">public</Visibility>
      <function line="1" column="11" />
      <Name line="1" column="20">sin</Name>
      <l-paren line="1" column="23" />
      <Parameter prod="(Parameter) ::= (Name) colon (Type)">
        <Name line="1" column="24">x</Name>
        <colon line="1" column="25" />
        <Type line="1" column="27">float64</Type>
      </Parameter>
      <r-paren line="1" column="34" />
      <ReturnType prod="(ReturnType) ::= turns-in (Type)">
        <turns-in line="1" column="36" />
        <Type line="1" column="39">float64</Type>
      </ReturnType>
      <StatementBlock prod="(StatementBlock) ::= l-brac r-brac">
        <l-brac line="1" column="47" />
        <r-brac line="2" column="4" />
      </StatementBlock>
    </Function>
    <Function prod="(Function) ::= (Visibility) function (Name) l-paren (Parameters) r-paren (ReturnType) (StatementBlock)">
      <Visibility line="3" column="4">public</Visibility>
      <function line="3" column="11" />
      <Name line="3" column="20">cos</Name>
      <l-paren line="3" column="23" />
      <Parameter prod="(Parameter) ::= (Name) colon (Type)">
        <Name line="3" column="24">x</Name>
        <colon line="3" column="25" />
        <Type line="3" column="27">float64</Type>
      </Parameter>
      <r-paren line="3" column="34" />
      <ReturnType prod="(ReturnType) ::= turns-in (Type)">
        <turns-in line="3" column="36" />
        <Type line="3" column="39">float64</Type>
      </ReturnType>
      <StatementBlock prod="(StatementBlock) ::= l-brac r-brac">
        <l-brac line="3" column="47" />
        <r-brac line="4" column="4" />
      </StatementBlock>
    </Function>
    <Function prod="(Function) ::= (Visibility) function (Name) l-paren (Parameters) r-paren (ReturnType) (StatementBlock)">
      <Visibility line="5" column="4">public</Visibility>
      <function line="5" column="11" />
      <Name line="5" column="20">abs</Name>
      <l-paren line="5" column="23" />
      <Parameter prod="(Parameter) ::= (Name) colon (Type)">
        <Name line="5" column="24">x</Name>
        <colon line="5" column="25" />
        <Type line="5" column="27">float64</Type>
      </Parameter>
      <r-paren line="5" column="34" />
      <ReturnType prod="(ReturnType) ::= turns-in (Type)">
        <turns-in line="5" column="36" />
        <Type line="5" column="39">float64</Type>
      </ReturnType>
      <StatementBlock prod="(StatementBlock) ::= l-brac r-brac">
        <l-brac line="5" column="47" />
        <r-brac line="6" column="4" />
      </StatementBlock>
    </Function>
    <r-brac line="7" column="0" />
  </Module>
  <Module prod="(Module) ::= module (Name) l-brac (ModuleMembers) r-brac">
    <module line="9" column="0" />
    <Name line="9" column="7">geometry</Name>
    <l-brac line="9" column="16" />
    <Interface prod="(Interface) ::= (Visibility) interface (Name) (Implements) l-brac (InterfaceMembers) r-brac">
      <Visibility line="11" column="1">public</Visibility>
      <interface line="11" column="8" />
      <Name line="11" column="18">Equatible</Name>
      <l-brac line="11" column="28" />
      <Method prod="(InterfaceMethod) ::= method (Name) l-paren (Parameters) r-paren (ReturnType) semicolon">
        <method line="12" column="2" />
        <Name line="12" column="9">equals</Name>
        <l-paren line="12" column="15" />
        <Parameter prod="(Parameter) ::= (Name) colon (Type)">
          <Name line="12" column="16">other</Name>
          <colon line="12" column="21" />
          <Type line="12" column="23">object</Type>
        </Parameter>
        <r-paren line="12" column="29" />
        <ReturnType prod="(ReturnType) ::= turns-in (Type)">
          <turns-in line="12" column="31" />
          <Type line="12" column="34">bool</Type>
        </ReturnType>
        <semicolon line="12" column="38" />
      </Method>
      <r-brac line="13" column="1" />
    </Interface>
    <Class prod="(Class) ::= (Visibility) class (Name) (Extends) (Implements) l-brac (ClassMembers) r-brac">
      <Visibility line="15" column="4">public</Visibility>
      <class line="15" column="11" />
      <Name line="15" column="17">Point</Name>
      <l-brac line="15" column="23" />
      <Field prod="(Field) ::= (Visibility) var (Name) colon (Type) semicolon">
        <var line="16" column="8" />
        <Name line="16" column="12">x</Name>
        <colon line="16" column="13" />
        <Type line="16" column="15">float32</Type>
        <semicolon line="16" column="22" />
      </Field>
      <Field prod="(Field) ::= (Visibility) var (Name) colon (Type) semicolon">
        <var line="17" column="8" />
        <Name line="17" column="12">y</Name>
        <colon line="17" column="13" />
        <Type line="17" column="15">float32</Type>
        <semicolon line="17" column="22" />
      </Field>
      <Method prod="(ClassMethod) ::= (Visibility) method (Name) l-paren (Parameters) r-paren (ReturnType) (StatementBlock)">
        <Visibility line="19" column="8">public</Visibility>
        <method line="19" column="15" />
        <Name line="19" column="22">add</Name>
        <l-paren line="19" column="25" />
        <Parameter prod="(Parameter) ::= (Name) colon (Type)">
          <Name line="19" column="26">p</Name>
          <colon line="19" column="27" />
          <Type line="19" column="29">Point</Type>
        </Parameter>
        <r-paren line="19" column="34" />
        <StatementBlock prod="(StatementBlock) ::= l-brac (StatementBlockMembers) r-brac">
          <l-brac line="19" column="36" />
          <Statement prod="(Statement) ::= (Expression) semicolon">
            <Assign prod="(Assign) ::= (Prec12Exp) assign (Expression)">
              <MemberAccess prod="(MemberAccess) ::= (Prec13Exp) dot (Member)">
                <Name line="20" column="12">this</Name>
                <dot line="20" column="16" />
                <Member line="20" column="17">x</Member>
              </MemberAccess>
              <assign line="20" column="19" />
              <Add prod="(Add) ::= (Prec10Exp) plus (Prec11Exp)">
                <ConstantValue line="20" column="21">12</ConstantValue>
                <plus line="20" column="24" />
                <ConstantValue line="20" column="26">15</ConstantValue>
              </Add>
            </Assign>
            <semicolon line="20" column="28" />
          </Statement>
          <Statement prod="(Statement) ::= (Expression) semicolon">
            <Assign prod="(Assign) ::= (Prec12Exp) assign (Expression)">
              <MemberAccess prod="(MemberAccess) ::= (Prec13Exp) dot (Member)">
                <Name line="21" column="12">this</Name>
                <dot line="21" column="16" />
                <Member line="21" column="17">y</Member>
              </MemberAccess>
              <assign line="21" column="19" />
              <Multiply prod="(Multiply) ::= (Prec11Exp) multiply (Prec12Exp)">
                <ConstantValue line="21" column="21">13</ConstantValue>
                <multiply line="21" column="24" />
                <PostIncrement prod="(PostIncrement) ::= (Prec13Exp) increment">
                  <ConstantValue line="21" column="26">16</ConstantValue>
                  <increment line="21" column="28" />
                </PostIncrement>
              </Multiply>
            </Assign>
            <semicolon line="21" column="30" />
          </Statement>
          <If prod="(If) ::= if l-paren (Expression) r-paren (Statement) else (Statement)">
            <if line="23" column="12" />
            <l-paren line="23" column="15" />
            <GreaterThan prod="(GreaterThan) ::= (Prec8Exp) greater-than (Prec9Exp)">
              <Name line="23" column="16">x</Name>
              <greater-than line="23" column="18" />
              <ConstantValue line="23" column="20">15</ConstantValue>
            </GreaterThan>
            <r-paren line="23" column="22" />
            <Statement prod="(Statement) ::= (Expression) semicolon">
              <Invocation prod="(Invocation) ::= (Prec13Exp) l-paren r-paren">
                <Name line="23" column="24">large</Name>
                <l-paren line="23" column="29" />
                <r-paren line="23" column="30" />
              </Invocation>
              <semicolon line="23" column="31" />
            </Statement>
            <else line="24" column="12" />
            <Statement prod="(Statement) ::= (Expression) semicolon">
              <Invocation prod="(Invocation) ::= (Prec13Exp) l-paren r-paren">
                <Name line="24" column="17">small</Name>
                <l-paren line="24" column="22" />
                <r-paren line="24" column="23" />
              </Invocation>
              <semicolon line="24" column="24" />
            </Statement>
          </If>
          <If prod="(If) ::= if l-paren (Expression) r-paren (Statement) else (Statement)">
            <if line="26" column="12" />
            <l-paren line="26" column="15" />
            <Not prod="(Not) ::= not (Prec12Exp)">
              <not line="26" column="16" />
              <Name line="26" column="17">x</Name>
            </Not>
            <r-paren line="26" column="18" />
            <StatementBlock prod="(StatementBlock) ::= l-brac (StatementBlockMembers) r-brac">
              <l-brac line="26" column="20" />
              <If prod="(If) ::= if l-paren (Expression) r-paren (Statement) else (Statement)">
                <if line="27" column="16" />
                <l-paren line="27" column="19" />
                <Not prod="(Not) ::= not (Prec12Exp)">
                  <not line="27" column="20" />
                  <Name line="27" column="21">y</Name>
                </Not>
                <r-paren line="27" column="22" />
                <StatementBlock prod="(StatementBlock) ::= l-brac (StatementBlockMembers) r-brac">
                  <l-brac line="27" column="24" />
                  <Statement prod="(Statement) ::= (Expression) semicolon">
                    <Invocation prod="(Invocation) ::= (Prec13Exp) l-paren r-paren">
                      <Name line="28" column="20">large</Name>
                      <l-paren line="28" column="25" />
                      <r-paren line="28" column="26" />
                    </Invocation>
                    <semicolon line="28" column="27" />
                  </Statement>
                  <r-brac line="29" column="16" />
                </StatementBlock>
                <else line="29" column="18" />
                <StatementBlock prod="(StatementBlock) ::= l-brac (StatementBlockMembers) r-brac">
                  <l-brac line="29" column="23" />
                  <Statement prod="(Statement) ::= (Expression) semicolon">
                    <Invocation prod="(Invocation) ::= (Prec13Exp) l-paren r-paren">
                      <Name line="30" column="20">small</Name>
                      <l-paren line="30" column="25" />
                      <r-paren line="30" column="26" />
                    </Invocation>
                    <semicolon line="30" column="27" />
                  </Statement>
                  <r-brac line="31" column="16" />
                </StatementBlock>
              </If>
              <r-brac line="32" column="12" />
            </StatementBlock>
            <else line="32" column="14" />
            <StatementBlock prod="(StatementBlock) ::= l-brac (StatementBlockMembers) r-brac">
              <l-brac line="32" column="19" />
              <Statement prod="(Statement) ::= (Expression) semicolon">
                <Invocation prod="(Invocation) ::= (Prec13Exp) l-paren r-paren">
                  <Name line="33" column="16">verySmall</Name>
                  <l-paren line="33" column="25" />
                  <r-paren line="33" column="26" />
                </Invocation>
                <semicolon line="33" column="27" />
              </Statement>
              <r-brac line="34" column="12" />
            </StatementBlock>
          </If>
          <r-brac line="35" column="8" />
        </StatementBlock>
      </Method>
      <r-brac line="36" column="4" />
    </Class>
    <Class prod="(Class) ::= (Visibility) class (Name) (Extends) (Implements) l-brac (ClassMembers) r-brac">
      <Visibility line="38" column="4">public</Visibility>
      <class line="38" column="11" />
      <Name line="38" column="17">Point3d</Name>
      <l-brac line="38" column="25" />
      <Field prod="(Field) ::= (Visibility) var (Name) colon (Type) semicolon">
        <var line="39" column="8" />
        <Name line="39" column="12">z</Name>
        <colon line="39" column="13" />
        <Type line="39" column="15">float32</Type>
        <semicolon line="39" column="22" />
      </Field>
      <r-brac line="40" column="4" />
    </Class>
    <r-brac line="41" column="0" />
  </Module>
</Global>
<?xml version="1.0" encoding="utf-8"?>
<xsl:stylesheet
    version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:msxsl="urn:schemas-microsoft-com:xslt"
    exclude-result-prefixes="msxsl"
    xmlns:ast="http://www.rosivm.org/2014/ast/">

  <xsl:output method="xml" indent="yes"/>

  <xsl:param name="identchars" select="'&#160;&#160;'" />

  <xsl:strip-space elements="*"/>

  <xsl:template match="/">
    <html>
      <style>
        .Visibility, .class, .module, .interface, .function, .method {color:#04A; font-weight:bold;}
        .Name {color:#A0A; font-weight:bold;}
        .Type {color:#00A; font-weight:bold;}
        .var, .turns-in {color:#AAA; font-weight:bold;}
         {color:#AAA; font-weight:bold;}
        .ConstantValue {color:#A00; font-weight:bold;}
      </style>
      <body>
        <code>
          <xsl:text>&#xa;</xsl:text>
          <xsl:apply-templates select="*">
            <xsl:with-param name="ident" select="''" />
          </xsl:apply-templates>
          <xsl:text>&#xa;</xsl:text>
        </code>
      </body>
    </html>
  </xsl:template>

  <xsl:template match="node()">
    <xsl:param name="ident" select="''" />
    <xsl:choose>
      <xsl:when test="text()">
        <xsl:apply-templates select="." mode="terminal">
          <xsl:with-param name="ident" select="$ident" />
        </xsl:apply-templates>
      </xsl:when>
      <xsl:when test="node()">
        <xsl:apply-templates select="." mode="production">
          <xsl:with-param name="ident" select="$ident" />
        </xsl:apply-templates>
      </xsl:when>
    </xsl:choose>
  </xsl:template>

  <xsl:template match="ast:Module" mode="production">
    <xsl:param name="ident" select="''" />
    
    <xsl:value-of select="$ident"/>
    
    <xsl:apply-templates select="ast:module" />
    <xsl:text> </xsl:text>
    <xsl:apply-templates select="ast:Name" />
    <xsl:text> </xsl:text>
    <xsl:apply-templates select="ast:l-brac" />
    <br/>
    <xsl:text>&#xa;</xsl:text>

    <xsl:apply-templates select="ast:Function | ast:Class | ast:Interface">
      <xsl:with-param name="ident" select="concat($identchars, $ident)" />
    </xsl:apply-templates>
    
    <xsl:value-of select="$ident"/>
    <xsl:apply-templates select="ast:r-brac" />
    <br/>
    <xsl:text>&#xa;</xsl:text>
  </xsl:template>
  <xsl:template match="ast:Function">
    <xsl:param name="ident" select="''" />

    <xsl:value-of select="$ident"/>
    
    <xsl:if test="ast:Visibility">
      <xsl:apply-templates select="ast:Visibility" />
      <xsl:text> </xsl:text>
    </xsl:if>
    <xsl:apply-templates select="ast:function" />
    <xsl:text> </xsl:text>
    <xsl:apply-templates select="ast:Name" />
    
    <xsl:apply-templates select="ast:l-paren" />
    <xsl:apply-templates select="ast:Parameter | ast:Parameters" />
    <xsl:apply-templates select="ast:r-paren" />
    <xsl:apply-templates select="ast:ReturnType" />

    <xsl:text> </xsl:text>
    <xsl:apply-templates select="ast:StatementBlock">
      <xsl:with-param name="ident" select="$ident" />
    </xsl:apply-templates>
  
    <br/>
    <xsl:text>&#xa;</xsl:text>
  </xsl:template>
  <xsl:template match="ast:Method">
    <xsl:param name="ident" select="''" />

    <xsl:value-of select="$ident"/>
    
    <xsl:if test="ast:Visibility">
      <xsl:apply-templates select="ast:Visibility" />
      <xsl:text> </xsl:text>
    </xsl:if>
    <xsl:apply-templates select="ast:method" />
    <xsl:text> </xsl:text>
    <xsl:apply-templates select="ast:Name" />
    
    <xsl:apply-templates select="ast:l-paren" />
    <xsl:apply-templates select="ast:Parameter | ast:Parameters" />
    <xsl:apply-templates select="ast:r-paren" />
    <xsl:apply-templates select="ast:ReturnType" />

    <xsl:if test="ast:StatementBlock">
      <xsl:text> </xsl:text>
      <xsl:apply-templates select="ast:StatementBlock">
        <xsl:with-param name="ident" select="$ident" />
      </xsl:apply-templates>
    </xsl:if>
    <xsl:apply-templates select="ast:semicolon">
      <xsl:with-param name="ident" select="$ident" />
    </xsl:apply-templates>
    <br/>
    <xsl:text>&#xa;</xsl:text>
  </xsl:template>
  <xsl:template match="ast:Class" mode="production">
    <xsl:param name="ident" select="''" />
    
    <xsl:value-of select="$ident"/>
    
    <xsl:if test="ast:Visibility">
      <xsl:apply-templates select="ast:Visibility" />
      <xsl:text> </xsl:text>
    </xsl:if>
    <xsl:apply-templates select="ast:class" />
    <xsl:text> </xsl:text>
    <xsl:apply-templates select="ast:Name" />
    <xsl:text> </xsl:text>
    
    <xsl:apply-templates select="ast:l-brac" />
    <br/>
    <xsl:text>&#xa;</xsl:text>
    
    <xsl:apply-templates select="ast:Var | ast:Method">
      <xsl:with-param name="ident" select="concat($identchars, $ident)" />
    </xsl:apply-templates>
    
    <xsl:value-of select="$ident"/>
    <xsl:apply-templates select="ast:r-brac" />
    <br/>
    <xsl:text>&#xa;</xsl:text>
  </xsl:template>
  <xsl:template match="ast:Interface" mode="production">
    <xsl:param name="ident" select="''" />
  
    <xsl:value-of select="$ident"/>
    
    <xsl:if test="ast:Visibility">
      <xsl:apply-templates select="ast:Visibility" />
      <xsl:text> </xsl:text>
    </xsl:if>
    <xsl:apply-templates select="ast:interface" />
    <xsl:text> </xsl:text>
    <xsl:apply-templates select="ast:Name" />
    <xsl:text> </xsl:text>
    
    <!-- extends -->
    
    <xsl:apply-templates select="ast:l-brac" />
    <br/>
    <xsl:text>&#xa;</xsl:text>

    <xsl:apply-templates select="ast:Var | ast:Method">
      <xsl:with-param name="ident" select="concat($identchars, $ident)" />
    </xsl:apply-templates>
    
    <xsl:value-of select="$ident"/>
    <xsl:apply-templates select="ast:r-brac" />
    <br/>
    <xsl:text>&#xa;</xsl:text>
  
  </xsl:template>
  
  <xsl:template match="ast:StatementBlock" mode="production">
    <xsl:param name="ident" select="''" />
    
    <!-- TODO: apply-templates to all statements with additional ident. -->
    <xsl:for-each select="*">
      <xsl:choose>
        <xsl:when test="position() = 1">
          <xsl:apply-templates select="ast:l-brac">
            <xsl:with-param name="ident" select="$ident" />
          </xsl:apply-templates>
          <br/>
          <xsl:text>&#xa;</xsl:text>
        </xsl:when>
        <xsl:when test="position() = count(../*) + 1">
          <xsl:value-of select="$ident"/>
          <xsl:apply-templates select="ast:r-brac">
            <xsl:with-param name="ident" select="$ident" />
          </xsl:apply-templates>
        </xsl:when>
        
      </xsl:choose>
    </xsl:for-each>
    <xsl:apply-templates select="*">
      <xsl:with-param name="ident" select="concat($identchars, $ident)" />
    </xsl:apply-templates>
    

  
  </xsl:template>
  
  <xsl:template match="ast:comma | ast:colon" mode="terminal">
    <xsl:param name="ident" />
    <xsl:call-template name="print-terminal">
      <xsl:with-param name="ident" select="$ident" />
    </xsl:call-template>
    <xsl:text>&#160;</xsl:text>
  </xsl:template>
  <xsl:template match="ast:turns-in" mode="terminal">
    <xsl:param name="ident" />
  
    <xsl:text>&#160;</xsl:text>
    <xsl:call-template name="print-terminal">
      <xsl:with-param name="ident" select="$ident" />
    </xsl:call-template>
    <xsl:text>&#160;</xsl:text>
  </xsl:template>

  <xsl:template match="*" mode="terminal">
    <xsl:param name="ident" select="''" />
    <xsl:call-template name="print-terminal">
      <xsl:with-param name="ident" select="$ident" />
    </xsl:call-template>
  </xsl:template>
  <xsl:template match="*" mode="production">
    <xsl:param name="ident" select="''" />
    <xsl:call-template name="print-production">
      <xsl:with-param name="ident" select="$ident" />
    </xsl:call-template>
  </xsl:template>

  <xsl:template name="print-terminal">
    <xsl:param name="ident" select="''" />
    <span class="{name()}">
      <xsl:value-of select="text()"/>
    </span>
  </xsl:template>
  <xsl:template name="print-production">
    <xsl:param name="ident" select="''" />
    <xsl:apply-templates select="*">
      <xsl:with-param name="ident" select="$ident" />
    </xsl:apply-templates>
  </xsl:template>

</xsl:stylesheet>
